{"version":3,"sources":["component/node/node-component.tsx","models.ts","service/data-service.ts","component/node-tree/node-tree-component.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NodeComponent","props","state","open","hidden","parent","toggleOpen","bind","this","setState","childrenList","children","map","child","key","id","additionalNodeClass","additionalCardClass","length","iconClass","className","onClick","data-tooltip","thumbnail","description","data-tooltip-location","src","href","alt","name","React","Component","NodeTreeModel","tree","nodes","item","push","sort","first","second","findChildren","node","indexOf","console","error","DataService","dataVar","data","NodeTreeComponent","dataService","getData","nodeList","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bbf74257.chunk.js","sourcesContent":["import React from 'react';\nimport {NodeModel} from \"../../models\";\nimport \"./node-component.scss\"\n\ntype StateTypes = {\n    open: boolean;\n    hidden: boolean;\n}\n\nclass NodeComponent extends React.Component<NodeModel,StateTypes>{\n\n    constructor(props: NodeModel){\n        super(props);\n        this.state = {open: false, hidden: !!props.parent};\n\n        this.toggleOpen = this.toggleOpen.bind(this);\n    }\n\n    toggleOpen(){\n        this.setState({open: !this.state.open});\n    }\n\n    render(){\n        let childrenList = this.props.children && this.state.open ? this.props.children.map((child: NodeModel) => {\n            return <NodeComponent key={child.id} {...child}  children={child.children}/>\n        }) : '';\n        let additionalNodeClass = this.props.parent ? 'child' : '';\n        let additionalCardClass = (this.props.children && this.props.children.length >= 0) ? 'pointer' : '';\n        let iconClass = (!this.props.children || this.props.children.length === 0) ? 'hidden' : '';\n        iconClass += this.state.open ? ' rot-90-cw' : '';\n\n        return (\n            <div className={'node no-select ' + additionalNodeClass}>\n                <div onClick={this.toggleOpen} className={'card ' + additionalCardClass}>\n                    <div className='content inline'>\n                        <span data-tooltip={this.props.thumbnail.description} data-tooltip-location=\"right\">\n\t                        <img src={this.props.thumbnail.href} alt={this.props.thumbnail.description} />\n                        </span>\n                    </div>\n                    <div className='title inline vertical-center'>\n                        {this.props.name}\n                    </div>\n                    <img className={'expander vertical-center ' + iconClass} src=\"https://img.icons8.com/windows/32/000000/play.png\" alt='arrow icon indicating open or not' />\n                </div>\n                {childrenList}\n            </div>\n        )\n    }\n\n    get hasChildren(): boolean {\n        return this.props.children.length > 0\n    }\n\n}export default NodeComponent\n","export class NodeTreeModel{\n    nodes: Array<NodeModel> = [];\n\n    constructor(tree: Array<Object>){\n        tree.map((item) => this.nodes.push(item as NodeModel));\n        this.nodes = this.nodes.sort((first: NodeModel, second: NodeModel) => first.id > second.id ? 1 : 0);\n        this.findChildren()\n    }\n\n    findChildren(){\n        this.nodes.map((node) => {\n            if(node.parent){\n                if(!this.nodes[node.parent].children){\n                    this.nodes[node.parent].children = []\n                }\n                this.nodes[node.parent].children.push(node)\n                delete this.nodes[this.nodes.indexOf(node)];\n            }\n            return true;\n        });\n        console.error(this.nodes)\n    }\n}\n\nexport class NodeModel {\n    thumbnail!: ThumbnailModel;\n    id!: number;\n    parent!: number;\n    name!: string;\n    children: Array<NodeModel> = []\n}\n\nexport class ThumbnailModel{\n    href!: string;\n    description!: string;\n}\n","import * as data from \"../data/test-data.json\";\nimport {NodeTreeModel} from \"../models\";\n\nexport class DataService{\n    private dataVar: any = (data as any).default = data;\n    private tree: NodeTreeModel = new NodeTreeModel(this.dataVar['default']);\n\n\n    get data(): NodeTreeModel{\n        return this.tree\n    }\n}\n","import React from \"react\";\nimport {NodeModel, NodeTreeModel} from \"../../models\";\nimport \"./node-tree-component.scss\"\nimport NodeComponent from \"../node/node-component\";\nimport {DataService} from \"../../service/data-service\";\n\ntype StateTypes = {\n    data: NodeTreeModel;\n}\n\nclass NodeTreeComponent extends React.Component<any,StateTypes>{\n    dataService: DataService;\n\n    constructor(props: any){\n        super(props);\n        this.dataService = new DataService();\n        this.state = {data: this.getData()};\n    }\n\n    getData(): NodeTreeModel {\n        return this.dataService.data\n    }\n\n    render(){\n        let nodeList = this.state.data.nodes.map((node: NodeModel) => {\n            return <NodeComponent key={node.id} {...node}  children={node.children}/>\n        });\n        return (\n            <div className='container'>\n                {nodeList}\n           </div>\n        );\n    }\n}export default NodeTreeComponent\n","import React from 'react';\nimport './App.scss';\nimport NodeTreeComponent from \"./component/node-tree/node-tree-component\";\n\nconst App: React.FC = () => {\n  return (\n      <NodeTreeComponent />\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}